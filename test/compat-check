#!/bin/bash

set -eu
set -o pipefail

progname=${0##*/}

# Use ABICC[1] to catch incompatible changes in:
#
# - API at the source level
# - ABI at the object code level
#
# ABICC supports at least three types of usage. This script uses the
# following pattern (lifted from the output of 'abi-compliance-checker
# --help'):
#
# ========================================================================
# USAGE #3 (CREATE ABI DUMPS):
#
# 1. Create XML-descriptors for two versions
# of a library (OLD.xml and NEW.xml):
#
# <version>
# 1.0
# </version>
#
# <headers>
# /path/to/headers/
# </headers>
#
# <libs>
# /path/to/libraries/
# </libs>
#
# 2. Create ABI dumps:
#
# abi-compliance-checker -lib NAME -dump OLD.xml -dump-path ./ABI-0.dump
# abi-compliance-checker -lib NAME -dump NEW.xml -dump-path ./ABI-1.dump
#
# 3. Compare ABI dumps to create report:
#
# abi-compliance-checker -l NAME -old ABI-0.dump -new ABI-1.dump
#
# ========================================================================
#
# resources/generate-compat-dump can be used to generate a dump suitable for
# input to this script, as an argument to --reference.
#
# [1] https://github.com/lvc/abi-compliance-checker

abicc="abi-compliance-checker"

# Generate a minimal XML description to pass to abicc's '-dump' option.
generate_xml_desc() {
    local desc

    desc="$(mktemp)"
    cat >"${desc}" <<EOF
<headers>
    {RELPATH}/include/
</headers>
<libs>
    {RELPATH}/lib/
</libs>
EOF
    echo "${desc}"
}

generate() {
    local libname
    local compiler
    local path
    local output
    local xml_descriptor

    libname="$1"
    shift
    compiler="$1"
    shift
    path="$1"
    shift
    output="$1"
    shift

    xml_descriptor="$(generate_xml_desc)"

    # Note: -gcc-path apparently does not require a pathname; e.g.
    # "powerpc-linux-gnu-gcc" seems to work fine.
    "${abicc}" \
        -dump "${xml_descriptor}" \
        -dump-format xml \
        -dump-path "${output}" \
        -gcc-path "${compiler}" \
        -l "${libname}" \
        -log-path /dev/null \
        -relpath "${path}" \
        -sort
}

check() {
    local path
    local old_dump
    local new_dump
    local xml_descriptor
    local compiler

    path="$1"
    shift
    old_dump="$1"
    shift
    compiler="$1"
    shift

    xml_descriptor="$(generate_xml_desc)"
    new_dump="$(mktemp XXXXXX.dump)"

    # generate a dump to a temp file, to be compared to $baseline
    generate librtas "${compiler}" "${path}" "${new_dump}"

    "${abicc}" -l librtas -old "${old_dump}" -new "${new_dump}" \
        -log-path /dev/null \
        -report-path /tmp/compat_report.html \
        -show-retval \
        -strict

    rm -f "${new_dump}"
}

usage() {
    local status

    status="$1"
    shift

    cat <<-EOF
	Usage:
	  ${progname} [--cc <compiler>] --check <path> --reference <dump file>

	  --check:     check <path> against <dump-file>
	  --reference: dump file generated by abi-compliance-checker, basis for comparison
	  --cc:        optional compiler command, needed for cross builds
EOF
    exit "${status}"
}

usage_msg() {
    printf "error: %s\n" "$1"
    shift
    usage 1
}

################################################################################
# main program

# Compiler to tell abi-compliance-checker to use. User may override.
cc_cmd=cc
# Root of filesystem tree into which libraries and headers to check have
# been installed.
path=
# An XML "dump" file generated by abi-compliance-checker, presumably using
# a prior version of the library being checked.
reference=

test "$#" -ge 1 || usage 1

while :; do
    case $1 in
        -h | --help)
            usage 0
            ;;
        --cc)
            test "$#" -ge 2 || usage_msg "${1} requires an argument"
            cc_cmd="$2"
            shift
            ;;
        --check)
            test "$#" -ge 2 || usage_msg "${1} requires an argument"
            path="$2"
            shift
            ;;
        --reference)
            test "$#" -ge 2 || usage_msg "${1} requires an argument"
            reference="$2"
            shift
            ;;
        *)
            printf "Unknown option/argument '%s'\n" "$1"
            usage 1
            ;;
    esac
    shift
    test "$#" -eq 0 && break
done

test -n "${reference}" || usage_msg "--reference <dump file> is required"
test -n "${path}" || usage_msg "--check <path> is required"

type "${abicc}" 2>/dev/null || {
    printf "%s is not found, skipping compatibility check\n" "${abicc}"
    exit 0
}
check "${path}" "${reference}" "${cc_cmd}"
